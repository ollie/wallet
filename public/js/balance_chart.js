// Generated by CoffeeScript 2.4.1
(function() {
  this.BalanceChart = class BalanceChart {
    constructor() {
      this.element = $('#balances-chart');
      if (!this.element.length) {
        return;
      }
      HighchartsConfig.init();
      this.init();
    }

    init() {
      return $.getJSON(this.element.data('url'), (data) => {
        var date, expenses, i, incomes, item, len, options, plotLineTimestamp, plotLines, series, target, timestamp, total, year, yearTmp;
        series = {
          total: {
            name: 'Celkem',
            showInNavigator: true,
            color: '#7cb5ec',
            lineWidth: 4,
            type: 'line',
            index: 4,
            marker: {
              lineWidth: 4,
              radius: 6,
              lineColor: '#7cb5ec',
              fillColor: 'white'
            },
            data: []
          },
          target: {
            name: 'Cíl',
            showInNavigator: true,
            color: '#fedd44',
            lineWidth: 4,
            type: 'line',
            index: 3,
            marker: {
              lineWidth: 4,
              radius: 6,
              lineColor: '#fedd44',
              fillColor: 'white'
            },
            data: []
          },
          incomes: {
            name: 'Příjmy',
            showInNavigator: false,
            color: '#108A00',
            type: 'column',
            index: 1,
            data: []
          },
          expenses: {
            name: 'Výdaje',
            showInNavigator: false,
            color: '#C73C35',
            type: 'column',
            index: 2,
            data: []
          }
        };
        plotLines = [];
        yearTmp = null;
        for (i = 0, len = data.length; i < len; i++) {
          item = data[i];
          date = new Date(item.date);
          year = date.getFullYear();
          if (yearTmp == null) {
            yearTmp = year;
          }
          timestamp = date.getTime();
          total = Number(item.total);
          if (item.target !== null) {
            target = Number(item.target);
          }
          incomes = Number(item.incomes);
          expenses = Number(item.expenses);
          if (year !== yearTmp) {
            plotLineTimestamp = Date.UTC(year, 0, 1);
            plotLines.push(this._createPlotLine(plotLineTimestamp, year));
            yearTmp = year;
          }
          series.total.data.push([timestamp, total]);
          series.target.data.push([timestamp, target]);
          series.incomes.data.push([timestamp, incomes]);
          series.expenses.data.push([timestamp, expenses]);
        }
        options = {
          chart: {
            height: 500,
            spacing: [5, 0, 5, 0]
          },
          type: 'line',
          xAxis: {
            plotLines: plotLines
          },
          series: [series.total, series.target, series.incomes, series.expenses],
          // plotOptions:
          //   series:
          //     animation: 500
          rangeSelector: {
            buttons: [
              {
                type: 'year',
                count: 1,
                text: 'Rok'
              },
              {
                type: 'all',
                text: 'Vše'
              }
            ],
            selected: 0,
            inputBoxWidth: 100,
            inputDateFormat: '%B %Y',
            inputEditDateFormat: '%d. %m. %Y'
          },
          credits: {
            enabled: false
          }
        };
        return Highcharts.stockChart(this.element.attr('id'), options);
      });
    }

    _createPlotLine(value, text) {
      return {
        color: '#e6e6e6',
        value: value,
        width: 1,
        label: {
          text: text,
          style: {
            color: '#cccccc'
          }
        }
      };
    }

  };

}).call(this);
